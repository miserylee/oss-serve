{"version":3,"file":"cli.js","sourceRoot":"","sources":["cli.ts"],"names":[],"mappings":";;;AACA,yBAAyB;AACzB,6BAA6B;AAC7B,mCAA4B;AAE5B,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,uBAAuB,CAAC,CAAC;AACxE,MAAM,kBAAkB,GAAG,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;AAErD,IAAI,MAAM,CAAC;AACX,EAAE,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;IACvB,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAC/B,CAAC;AAAC,IAAI,CAAC,CAAC;IACN,MAAM,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,cAAc,CAAC,CAAC,CAAC;IACjE,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC;AACrB,CAAC;AAED,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;IACZ,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;AAC7C,CAAC;AAED,MAAM,EAAE,WAAW,EAAE,eAAe,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAC;AAEjH,MAAM,KAAK,GAAG,IAAI,eAAK,CAAC;IACtB,GAAG,EAAE;QACH,WAAW;QACX,eAAe;QACf,MAAM;QACN,MAAM;KACP;IACD,KAAK;IACL,WAAW;IACX,OAAO;CACR,CAAC,CAAC;AAEH,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAEzC,MAAM,EAAE,GAAG,GAAG,CAAC,EAAE;IACf,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACR,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACnB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACnB,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,OAAO,CAAC,IAAI,EAAE,CAAC;IACjB,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;IAChB,KAAK,MAAM;QACT,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QACzB,KAAK,CAAC;IACR,KAAK,MAAM,CAAC;IACZ;QACE,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;AAC7B,CAAC","sourcesContent":["#!/usr/bin/env node\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport Serve from './index';\n\nconst configPath = path.resolve(process.cwd(), 'oss-serve.config.json');\nconst isConfigFileExists = fs.existsSync(configPath);\n\nlet config;\nif (isConfigFileExists) {\n  config = require(configPath);\n} else {\n  const pkg = require(path.resolve(process.cwd(), 'package.json'));\n  config = pkg.serve;\n}\n\nif (!config) {\n  throw new Error('No configuration found!');\n}\n\nconst { accessKeyId, accessKeySecret, bucket, region, match, destination, baseUrl, pushRoot, pullRoot } = config;\n\nconst serve = new Serve({\n  oss: {\n    accessKeyId,\n    accessKeySecret,\n    bucket,\n    region,\n  },\n  match,\n  destination,\n  baseUrl,\n});\n\nconst command = process.argv.slice(2)[0];\n\nconst cb = err => {\n  if (err) {\n    console.error(err);\n    process.exit(-1);\n  } else {\n    process.exit();\n  }\n};\n\nswitch (command) {\n  case 'pull':\n    serve.pull(pullRoot, cb);\n    break;\n  case 'push':\n  default:\n    serve.push(pushRoot, cb);\n}\n"]}